{"version":3,"sources":["components/ControlBar.tsx","components/Gallery.tsx","components/ReactApp.tsx","hooks/useQueryParams.tsx","App.tsx","index.tsx"],"names":["SearchOptions","map","opt","key","value","text","Container","styled","div","paddingTop","paddingBottom","display","flexWrap","justifyContent","ControlBarDropdown","Dropdown","ControlBarInput","Input","width","marginRight","ControlBarButton","span","marginLeft","ButtonGroup","Button","Group","ControlBar","props","useState","isUser","setUser","searchText","setSearchText","count","setCount","dropDown","options","onChange","e","d","history","useHistory","label","n","i","color","onClick","push","Post","url","includes","replace","sanitizeForImgur","PostDiv","Image","src","href","target","maxWidth","padding","alignItems","Gallery","posts","post","ReactApp","query","URLSearchParams","useLocation","search","searchParams","p","get","useQueryParams","reddit","user","page","appData","setAppData","postCount","parseInt","console","log","isRedditSearch","useEffect","axios","then","response","data","children","child","filter","post_hint","catch","err","App","path","to","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eb015b97.chunk.js","sourcesContent":["import styled from '@emotion/styled';\nimport React, { useEffect, useState } from 'react'\nimport { useHistory } from 'react-router-dom';\nimport { Button, Dropdown, Input } from 'semantic-ui-react'\n\nexport interface ControlBarProps {\n    isUser : boolean;\n    searchText : string;\n    count : number;\n}\n\nconst ControlBar : React.FC<ControlBarProps> = (props : ControlBarProps) => {\n    const [isUser, setUser] = useState(props.isUser)\n    const [searchText, setSearchText] = useState(props.searchText)\n    const [count, setCount] = useState(props.count)\n\n    const dropDown = <ControlBarDropdown \n                        options={SearchOptions}\n                        value={isUser ? '/u' : '/r'}\n                        onChange={(e, d) => setUser(d.value === '/u')}\n                    />\n\n    const history = useHistory()\n    const onSearch = () => {\n        history.push(`/search?${isUser? 'u' : 'r'}=${searchText}&n=${count}`)\n    }\n\n    return (\n        <Container>\n            <ControlBarInput\n                label={dropDown}\n                value={searchText}\n                onChange={(e, d) => setSearchText(d.value)}\n            />\n\n            <ButtonGroup>\n                {[10, 25, 50].map((n, i) => (\n                        <Button \n                            key={i}\n                            color={n === count ? 'teal' : 'grey'}\n                            onClick={() => setCount(n)}\n                        >\n                            {n}\n                        </Button>\n                    ))\n                }\n            </ButtonGroup>\n\n            <ControlBarButton>\n                <Button color={'teal'} onClick={onSearch}>Fetch Images</Button>\n            </ControlBarButton>\n        </Container>\n    )\n}\n\nconst SearchOptions = ['/r', '/u'].map(opt => ({\n    key : opt,\n    value : opt,\n    text : opt,\n}));\n\nconst Container = styled.div({\n    paddingTop : 50,\n    paddingBottom : 50,\n    display : 'flex',\n    flexWrap : 'wrap',\n    justifyContent : 'center'\n});\n\nconst ControlBarDropdown = styled(Dropdown)({\n});\n\nconst ControlBarInput = styled(Input)({\n    width: 400,\n    marginRight : 20,\n});\n\nconst ControlBarButton = styled.span({\n    marginLeft : 20,\n});\n\nconst ButtonGroup = styled(Button.Group)({\n});\n\nexport default ControlBar;\n","import styled from '@emotion/styled'\nimport React from 'react'\nimport {Image} from 'semantic-ui-react'\n\nexport interface GalleryProps {\n    posts : any[]\n}\n\nconst Gallery : React.FC<GalleryProps> = (props : GalleryProps) => {\n    // <ul>\n    //         {props.posts.map(post => <li><a href={post.url} target=\"_blank\">{post.url}</a></li>)}\n    //     </ul>\n    return (\n        <Container>\n            {props.posts.map(post => <Post url={post.url} />)}\n        </Container>\n    )\n}\n\nconst sanitizeForImgur = (url : string) => {\n    if (url.includes('imgur') && \n        !(url.includes('jpg') || url.includes('jpeg')))\n        return url\n    \n    if (url.includes(\"i.imgur.com\"))\n        return url\n    \n    if (url.includes(\"imgur.com\"))\n        return url.replace(\"imgur.com\", \"i.imgur.com\")\n    \n    return url\n}\n\nconst Post = (props : {url : string}) => {\n    const url = sanitizeForImgur(props.url)\n    return (\n        <PostDiv>\n            <Image src={url} href={url} target='_blank' />\n        </PostDiv>\n    )\n}\n\nconst PostDiv = styled.div({\n    maxWidth : 400,\n    padding : 20,\n})\n\nconst Container = styled.div({\n    display : 'flex',\n    flexWrap : 'wrap',\n    alignItems : 'flex-start',\n})\n\nexport default Gallery","import React, {useState, useEffect} from 'react'\nimport { useQueryParams } from \"../hooks/useQueryParams\"\nimport ControlBar from \"./ControlBar\"\nimport styled from '@emotion/styled';\nimport axios from \"axios\";\nimport Gallery from './Gallery'\n\nexport const ReactApp = () => {\n    const [reddit, user, count] = useQueryParams('r', 'u', 'n')\n    const [appData, setAppData] = useState({\n        posts : [] as any,\n        page : 1\n    })\n\n    let postCount : number = 10;\n    if (count) postCount = parseInt(count)\n\n    console.log(reddit, user, postCount)\n\n    const isRedditSearch = (reddit !== null)\n\n    useEffect(() => {\n        if (isRedditSearch && reddit) {\n            axios.get(`https://www.reddit.com/r/${reddit}.json?limit=${postCount}`)\n                .then(response => response.data.data.children.map((child : any) => child.data))\n                .then(posts => {\n                    console.log(\"$$$$\", posts)\n                    return posts\n                })\n                .then(posts => posts.filter((post : any) => post.post_hint===\"image\" || post.post_hint===\"link\"))\n                .then(posts => setAppData({\n                    posts,\n                    page : 1,\n                }))\n                .catch(err => console.log(err))\n            \n        }\n\n    }, [reddit, user])\n\n    return (\n        <Container>\n            <ControlBar \n                isUser={!isRedditSearch}\n                searchText={reddit || \"\"}\n                count={postCount}\n            />\n            <Gallery posts={appData.posts} />\n        </Container>\n        \n    )\n}\n\nconst Container = styled.div({})","import { useLocation } from \"react-router-dom\";\n\nexport const useQueryParams = (...searchParams : string[]) => {\n  const query = new URLSearchParams(useLocation().search);\n  \n  return searchParams.map(p => query.get(p))\n}","import React from 'react'\nimport 'semantic-ui-css/semantic.min.css'\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\nimport { ReactApp } from './components/ReactApp';\n\nconst App = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route path='/search'>\n            <ReactApp />\n        </Route>\n        <Route path='*'>\n          <Redirect to=\"/search?r=aww&n=20\" />\n        </Route>\n      </Switch>\n    </Router>\n  )\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}